# Configuration pour l'environnement Docker
spring.application.name=java-cine-api
server.port=8080

# Base de données PostgreSQL (via variables d'environnement)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Pool de connexions optimisé pour la production
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000

# TMDB API (via variables d'environnement)
tmdb.bearer.token=${TMDB_BEARER_TOKEN}
tmdb.base.url=${TMDB_BASE_URL:https://api.themoviedb.org/3}

# Configuration des logs pour la production
logging.level.root=INFO
logging.level.com.example.java_cine_api=INFO
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n

# Configuration des actuator endpoints pour le monitoring
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true

# Configuration de sécurité CORS pour la production
cors.allowed.origins=*
cors.allowed.methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed.headers=*
cors.allow.credentials=true
